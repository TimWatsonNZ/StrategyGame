/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./index.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./Grid/GridService.js":
/*!*****************************!*\
  !*** ./Grid/GridService.js ***!
  \*****************************/
/*! exports provided: gridService, gridServiceInit */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"gridService\", function() { return gridService; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"gridServiceInit\", function() { return gridServiceInit; });\n/* harmony import */ var _mapEntities_Point__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../mapEntities/Point */ \"./mapEntities/Point.js\");\n/* harmony import */ var _MapGenerator__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./MapGenerator */ \"./Grid/MapGenerator.js\");\n\r\n\r\n\r\nclass GridService {\r\n  constructor(gridSize) {\r\n    this.gridSize = gridSize;\r\n    this.grid = [];\r\n  }\r\n\r\n  createMap() {\r\n    this.grid = _MapGenerator__WEBPACK_IMPORTED_MODULE_1__[\"default\"].generate(this.gridSize);\r\n  }\r\n\r\n  createClippedGrid(viewPortOrigin, viewPortEnd) {\r\n    const newgrid = [];\r\n    const startPoint = new _mapEntities_Point__WEBPACK_IMPORTED_MODULE_0__[\"default\"](viewPortOrigin.x, viewPortOrigin.y);\r\n    const endPoint = new _mapEntities_Point__WEBPACK_IMPORTED_MODULE_0__[\"default\"](viewPortEnd.x, viewPortEnd.y);\r\n    \r\n    for (let y = startPoint.y;y <= endPoint.y;y++) {\r\n      const newrow = [];\r\n      const row = this.grid[y];\r\n      if (row) {\r\n        for (let x = startPoint.x; x <= endPoint.x; x++) {\r\n        const tile = row[x];\r\n\r\n          if (tile && tile.point) {\r\n            tile.drawingPoint = new _mapEntities_Point__WEBPACK_IMPORTED_MODULE_0__[\"default\"](tile.point.x, tile.point.y);\r\n            tile.drawingPoint.x = x - startPoint.x;\r\n            tile.drawingPoint.y = y - startPoint.y;\r\n            newrow.push(tile);\r\n          }\r\n        }\r\n      }  \r\n      newgrid.push(newrow);\r\n    }\r\n    return newgrid;\r\n  }\r\n  \r\n  tileToIndex (tile) {\r\n    return new _mapEntities_Point__WEBPACK_IMPORTED_MODULE_0__[\"default\"](tile.point.x, tile.point.y);\r\n  }\r\n\r\n  getNeighbours(index, preserveOrder = false, noDiagonals = false, inputGrid = null) {\r\n    let grid = inputGrid ? inputGrid : this.grid;\r\n    const tile = grid[index.y][index.x];\r\n    const allDeltas = [\r\n      { x:-1, y: -1 }, {x: 0, y: -1},  { x: 1, y: -1},\r\n      { x:-1, y:  0 },              ,  { x: 1, y:  0},\r\n      { x:-1, y:  1 }, {x: 0, y:  1 }, { x: 1, y:  1},\r\n    ];\r\n\r\n    const noDiagonalsDeltas = [\r\n                     , { x: 0, y: -1 },  \r\n      { x:-1, y:  0 },              ,  { x: 1, y:  0},\r\n                       { x: 0, y:  1 },\r\n    ];\r\n\r\n    const neighbours = [];\r\n    if (!tile) {\r\n      return neighbours;\r\n    }\r\n\r\n    const deltas = noDiagonals ? noDiagonalsDeltas : allDeltas;\r\n    deltas.forEach(delta => {\r\n      const indexX = index.x + delta.x;\r\n      const indexY = index.y + delta.y;\r\n\r\n      if (indexX < 0 || indexX > grid.length-1 ||\r\n          indexY < 0 || indexY > grid.length-1) {\r\n          if (preserveOrder) neighbours.push(null);\r\n      } else {\r\n        neighbours.push(grid[indexY][indexX]);\r\n      }\r\n    });\r\n\r\n    return neighbours;\r\n  }\r\n\r\n  findSelectedTileCrossNeighbours(tile) {\r\n    return this.findCrossNeighbours(tile);\r\n  }\r\n\r\n  findCrossNeighbours(tile) {\r\n    return this.getNeighbours(this.tileToIndex(tile), true, true);\r\n  }\r\n}\r\n\r\nlet gridService = null;\r\nfunction gridServiceInit(gridSize) {\r\n  gridService = new GridService(gridSize);\r\n}\r\n\r\n\r\n\n\n//# sourceURL=webpack:///./Grid/GridService.js?");

/***/ }),

/***/ "./Grid/MapGenerator.js":
/*!******************************!*\
  !*** ./Grid/MapGenerator.js ***!
  \******************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _GridService__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./GridService */ \"./Grid/GridService.js\");\n/* harmony import */ var _map_Tiles_Tile__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../map/Tiles/Tile */ \"./map/Tiles/Tile.js\");\n\r\n\r\n\r\nclass MapGenerator {\r\n\r\n  generate(gridSize) {\r\n    let grid = []\r\n    for(let h=0;h<gridSize;h++) {\r\n      const row = [];\r\n      for(let w=0;w<gridSize;w++) {\r\n        row.push(new _map_Tiles_Tile__WEBPACK_IMPORTED_MODULE_1__[\"default\"](w, h, 'blank'));\r\n      }\r\n      grid.push(row);\r\n    }\r\n    \r\n    const seedTileCount = 80;\r\n    for (let i=0;i < seedTileCount;i++) {\r\n      const randomTile = grid[Math.floor(Math.random() * grid.length)][Math.floor(Math.random() * grid.length)];\r\n      randomTile.type = 'grass';\r\n    }\r\n    \r\n    grid[Math.round(grid.length/2)][Math.round(grid.length/2)].type = 'grass';\r\n      \r\n    grid = this.dfa(gridSize, grid, this.growGrass);\r\n    grid = this.dfa(gridSize, grid, this.growGrass);\r\n    this.floodFill(grid, grid[Math.round(grid.length/2)][Math.round(grid.length/2)]);\r\n\r\n    grid = this.dfa(gridSize, grid, this.smoothRule);\r\n    grid = this.dfa(gridSize, grid, this.smoothRule);\r\n\r\n    this.fillInHoles(grid);\r\n\r\n    return grid;\r\n  }\r\n\r\n  floodFill(grid, start) {\r\n    const stack = [start];\r\n\r\n    while (stack.length > 0) {\r\n      const tile = stack.pop();\r\n      const neighbours = _GridService__WEBPACK_IMPORTED_MODULE_0__[\"gridService\"].getNeighbours(_GridService__WEBPACK_IMPORTED_MODULE_0__[\"gridService\"].tileToIndex(tile), false, false, grid);\r\n      const waterNeighbours = neighbours.filter(x => x.type === 'water').length;\r\n      const grassNeighbours = neighbours.filter(x => x.type === 'grass').length;\r\n      \r\n      if (Math.round(Math.random() * (waterNeighbours + grassNeighbours)) > waterNeighbours) {\r\n        _map_Tiles_Tile__WEBPACK_IMPORTED_MODULE_1__[\"default\"].type = 'grass';\r\n      } else {\r\n        _map_Tiles_Tile__WEBPACK_IMPORTED_MODULE_1__[\"default\"].type = 'water';\r\n      }\r\n      neighbours.filter(x => x.type === 'blank').forEach(x => stack.push(x));\r\n    }\r\n  }\r\n\r\n  dfa (gridSize, grid, rule) {\r\n    const newGrid = [];\r\n\r\n    for(let h=0;h < gridSize;h++) {\r\n      const newRow = [];\r\n      for(let w=0;w < gridSize;w++) {\r\n        const tile = grid[h][w];\r\n        const neighbours = _GridService__WEBPACK_IMPORTED_MODULE_0__[\"gridService\"].getNeighbours(_GridService__WEBPACK_IMPORTED_MODULE_0__[\"gridService\"].tileToIndex(tile), false, false, grid);\r\n\r\n        const waterNeighbours = neighbours.filter(x => x.type === 'water').length;\r\n        const grassNeighbours = neighbours.filter(x => x.type === 'grass').length;\r\n\r\n        const copy = _map_Tiles_Tile__WEBPACK_IMPORTED_MODULE_1__[\"default\"].copy(tile);\r\n        copy.type = rule(copy, waterNeighbours, grassNeighbours);\r\n        \r\n        newRow.push(copy);\r\n      }\r\n      newGrid.push(newRow);\r\n    }\r\n    return newGrid;\r\n  }\r\n\r\n  smoothRule (tile, waterNeighbours, grassNeighbours) {\r\n    if (tile.type === 'water' && grassNeighbours > 3) {\r\n      return 'grass';\r\n    }\r\n    if (tile.type === 'grass' && waterNeighbours > 7) {\r\n      return 'water';\r\n    }\r\n    return _map_Tiles_Tile__WEBPACK_IMPORTED_MODULE_1__[\"default\"].type;\r\n  }\r\n\r\n  growGrass (tile, waterNeighbours, grassNeighbours) {\r\n    if (tile.type === 'water' && grassNeighbours > 0) {\r\n      return 'grass';\r\n    }\r\n    return _map_Tiles_Tile__WEBPACK_IMPORTED_MODULE_1__[\"default\"].type;\r\n  }\r\n\r\n  fillInHoles(grid) {\r\n    for(let y = 0; y < grid.length; y++) {\r\n      for (let h = 0; h < grid[y].length; h++) {\r\n        if (grid[y][h].type === 'blank') {\r\n          grid[y][h].type = 'water';\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n/* harmony default export */ __webpack_exports__[\"default\"] = (new MapGenerator());\n\n//# sourceURL=webpack:///./Grid/MapGenerator.js?");

/***/ }),

/***/ "./Map/Map.js":
/*!********************!*\
  !*** ./Map/Map.js ***!
  \********************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _mapEntities_Point__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../mapEntities/Point */ \"./mapEntities/Point.js\");\n/* harmony import */ var _mapEntities_City__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../mapEntities/City */ \"./mapEntities/City.js\");\n/* harmony import */ var _mapEntities_Unit__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../mapEntities/Unit */ \"./mapEntities/Unit.js\");\n/* harmony import */ var _Grid_GridService__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../Grid/GridService */ \"./Grid/GridService.js\");\n/* harmony import */ var _mapEntities_Road__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../mapEntities/Road */ \"./mapEntities/Road.js\");\n\r\n\r\n\r\n\r\n\r\n\r\nclass Map {\r\n  \r\n  constructor(size, tileNumber, context) {\r\n    //  Draw grid of squares\r\n    this.context = context;\r\n    this.size = size;\r\n    this.tileNumber = tileNumber;\r\n    this.viewPortOrigin = new _mapEntities_Point__WEBPACK_IMPORTED_MODULE_0__[\"default\"](0, 0);\r\n    this.origin = new _mapEntities_Point__WEBPACK_IMPORTED_MODULE_0__[\"default\"](0, 0);\r\n    this.selectedTile = null;\r\n    this.selectedEntity = null;\r\n\r\n    Object(_Grid_GridService__WEBPACK_IMPORTED_MODULE_3__[\"gridServiceInit\"])(this.tileNumber);\r\n    _Grid_GridService__WEBPACK_IMPORTED_MODULE_3__[\"gridService\"].createMap();\r\n\r\n    this.clippedGrid = [];\r\n    this.viewPortSize = size; //  how large the view port is\r\n    this.zoomLevel = 40;  //  how many Tiles are in view port\r\n    this.viewPortEnd = new _mapEntities_Point__WEBPACK_IMPORTED_MODULE_0__[\"default\"](this.viewPortOrigin.x +  this.zoomLevel, this.viewPortOrigin.y +  this.zoomLevel);\r\n     \r\n    this.clippedGrid = _Grid_GridService__WEBPACK_IMPORTED_MODULE_3__[\"gridService\"].createClippedGrid(this.viewPortOrigin, this.viewPortEnd);\r\n    this.tileSize = this.viewPortSize / this.zoomLevel; //  should be view port size / view port content size\r\n  }\r\n\r\n  grid() {\r\n    return _Grid_GridService__WEBPACK_IMPORTED_MODULE_3__[\"gridService\"].grid;\r\n  }\r\n\r\n  clickTile(x, y) {\r\n    const tileX = Math.floor(x / this.tileSize);\r\n    const tileY = Math.floor(y / this.tileSize);\r\n\r\n    const tile = this.clippedGrid[tileY] && this.clippedGrid[tileY][tileX];\r\n\r\n    if (tile) {  \r\n      if (this.selectedTile) {\r\n        this.selectedTile.selected = false;\r\n      }\r\n      if (tile.unit || tile.road || tile.city) {\r\n        this.selectedEntity = tile.unit || tile.road || tile.city;\r\n      } else {\r\n        this.selectedEntity = null;\r\n      }\r\n      this.selectedTile = tile;\r\n      tile.selected = true;\r\n      this.draw();\r\n    }\r\n\r\n    return tile;\r\n  }\r\n\r\n  drag(diffX, diffY) {\r\n\r\n    const minDrag = 1;\r\n    if (Math.abs(diffX) > minDrag || Math.abs(diffY) > minDrag) {\r\n      if (diffX > 0) {\r\n        const sum = this.viewPortOrigin.x + Math.round(diffX);\r\n        this.viewPortOrigin.x = Math.min(sum, this.tileNumber);\r\n        this.viewPortEnd.x = this.viewPortOrigin.x + this.zoomLevel;\r\n      } else {\r\n        const sum = this.viewPortOrigin.x + Math.round(diffX);\r\n        this.viewPortOrigin.x = Math.max(sum, 0);\r\n        this.viewPortOrigin.x = this.viewPortOrigin.x + this.zoomLevel;\r\n      }\r\n\r\n      if (diffY > 0) {\r\n        const sum = this.viewPortOrigin.y + Math.round(diffY);\r\n        this.viewPortOrigin.y = Math.min(sum, this.tileNumber);\r\n        this.viewPortOrigin.y = this.viewPortOrigin.y + this.zoomLevel;\r\n      } else {\r\n        const sum = this.viewPortOrigin.x + Math.round(diffY);\r\n        this.viewPortOrigin.y = Math.max(sum, 0);\r\n        this.viewPortOrigin.y = this.viewPortOrigin.y + this.zoomLevel;\r\n      }\r\n      \r\n      this.updateView();\r\n    }\r\n  }\r\n\r\n  moveUnit(unit, neighbour) {\r\n    const originalTile = unit.tile;\r\n    unit.tile = this.grid()[neighbour.point.y][neighbour.point.x];\r\n    this.grid()[neighbour.point.y][neighbour.point.x].unit = unit;\r\n    originalTile.unit = null;\r\n    this.draw();\r\n  }\r\n\r\n\r\n  leftKey(){\r\n    if (this.selectedEntity && this.selectedEntity instanceof _mapEntities_Unit__WEBPACK_IMPORTED_MODULE_2__[\"default\"]) {\r\n      this.entityLeft();\r\n    } else {\r\n      this.panLeft();\r\n    }\r\n  }\r\n\r\n  rightKey(){\r\n    if (this.selectedEntity && this.selectedEntity instanceof _mapEntities_Unit__WEBPACK_IMPORTED_MODULE_2__[\"default\"]) {\r\n      this.entityRight();\r\n    } else {\r\n      this.panRight();\r\n    }\r\n  }\r\n\r\n  upKey(){\r\n    if (this.selectedEntity && this.selectedEntity instanceof _mapEntities_Unit__WEBPACK_IMPORTED_MODULE_2__[\"default\"]) {\r\n      this.entityUp();\r\n    } else {\r\n      this.panUp();\r\n    }\r\n  }\r\n\r\n  downKey(){\r\n    if (this.selectedEntity && this.selectedEntity instanceof _mapEntities_Unit__WEBPACK_IMPORTED_MODULE_2__[\"default\"]) {\r\n      this.entityDown();\r\n    } else {\r\n      this.panDown();\r\n    }\r\n  }\r\n\r\n  entityLeft() {\r\n    const neighbour = _Grid_GridService__WEBPACK_IMPORTED_MODULE_3__[\"gridService\"].findCrossNeighbours(this.selectedEntity.tile)[1];\r\n    if (neighbour && neighbour.type !== 'water') {\r\n      this.moveUnit(this.selectedEntity, neighbour);\r\n    }\r\n  }\r\n  \r\n  entityRight() {\r\n    const neighbour = _Grid_GridService__WEBPACK_IMPORTED_MODULE_3__[\"gridService\"].findCrossNeighbours(this.selectedEntity.tile)[2];\r\n    if (neighbour && neighbour.type !== 'water') {\r\n      this.moveUnit(this.selectedEntity, neighbour);\r\n    }\r\n  }\r\n  \r\n  entityUp() {\r\n    const neighbour = _Grid_GridService__WEBPACK_IMPORTED_MODULE_3__[\"gridService\"].findCrossNeighbours(this.selectedEntity.tile)[0];\r\n    if (neighbour && neighbour.type !== 'water') {\r\n      this.moveUnit(this.selectedEntity, neighbour);\r\n    }\r\n  }\r\n\r\n  entityDown() {\r\n    const neighbour = _Grid_GridService__WEBPACK_IMPORTED_MODULE_3__[\"gridService\"].findCrossNeighbours(this.selectedEntity.Tile)[3];\r\n    if (neighbour && neighbour.type !== 'water') {\r\n      this.moveUnit(this.selectedEntity, neighbour);\r\n    }\r\n  }\r\n\r\n  panLeft() {\r\n    if (this.viewPortOrigin.x > 0) {\r\n      this.viewPortOrigin.x--;\r\n      this.viewPortEnd.x--;\r\n      this.updateView();\r\n    }\r\n  }\r\n\r\n  panRight() {\r\n    if (this.viewPortOrigin.x + this.zoomLevel < this.tileNumber) {\r\n      this.viewPortOrigin.x++;\r\n      this.viewPortEnd.x++;\r\n      this.updateView();\r\n    }\r\n  }\r\n\r\n  panUp() {\r\n    if (this.viewPortOrigin.y > 0) {\r\n      this.viewPortOrigin.y--;\r\n      this.viewPortEnd.y--;\r\n      this.updateView();  \r\n    }\r\n  }\r\n\r\n  panDown() {\r\n    if (this.viewPortOrigin.y + this.zoomLevel < this.tileNumber) {\r\n      this.viewPortOrigin.y++;\r\n      this.viewPortEnd.y++;\r\n      this.updateView();\r\n    }\r\n  }\r\n\r\n  zoomOut() {\r\n    if (this.zoomLevel < 100) {\r\n      this.zoomLevel++;\r\n      this.zoom();\r\n    }\r\n  }\r\n\r\n  zoomIn() {\r\n    if (this.zoomLevel > 1) {\r\n      this.zoomLevel--;\r\n      this.zoom();\r\n    }\r\n  }\r\n\r\n  zoom() {\r\n    this.viewPortEnd = new _mapEntities_Point__WEBPACK_IMPORTED_MODULE_0__[\"default\"](this.viewPortOrigin.x +  this.zoomLevel, this.viewPortOrigin.y +  this.zoomLevel);\r\n    this.tileSize = this.viewPortSize / this.zoomLevel;\r\n    this.updateView();\r\n  }\r\n\r\n  updateView() {\r\n    this.clippedGrid = _Grid_GridService__WEBPACK_IMPORTED_MODULE_3__[\"gridService\"].createClippedGrid(this.viewPortOrigin, this.viewPortEnd);\r\n    this.draw();\r\n  }\r\n\r\n  update() {\r\n    console.log('update');\r\n  }\r\n\r\n  draw() {\r\n    this.context.fillStyle = '#FFFFFF';\r\n    this.context.fillRect(0, 0, this.size, this.size);\r\n    this.context.fillStyle = '#000000';\r\n\r\n    for(let h=0;h<this.clippedGrid.length;h++) {\r\n      for(let w=0;w<this.clippedGrid[h].length;w++) {\r\n        const tile = this.clippedGrid[h][w];\r\n        if (tile && (tile.drawingPoint.x) <= this.viewPortEnd.x && (tile.drawingPoint.x) >= 0 && (tile.drawingPoint.y) >= 0 && tile.drawingPoint.y <= this.viewPortEnd.y) {\r\n          if (tile.type === 'grass') {\r\n            this.context.fillStyle = '#00FF00';\r\n          }\r\n          if (tile.type === 'water') {\r\n            this.context.fillStyle = '#0000FF';\r\n          }\r\n          if (tile.type === 'blank') {\r\n            this.context.fillStyle = '#FFFFFF';\r\n          }\r\n          this.context.fillRect(tile.drawingPoint.x * this.tileSize, tile.drawingPoint.y * this.tileSize, this.tileSize, this.tileSize);\r\n\r\n          if (tile.selected) {\r\n            this.context.strokeStyle = '#000000';\r\n            this.context.strokeRect(tile.drawingPoint.x * this.tileSize, tile.drawingPoint.y * this.tileSize, this.tileSize, this.tileSize);\r\n            this.context.strokeStyle = '#FFFFFF';\r\n          }\r\n\r\n          if (tile.city) {\r\n            tile.city.draw(this.context, this.tileSize);\r\n          }\r\n\r\n          if (tile.road) {\r\n            tile.road.draw(this.context, this.tileSize);\r\n          }\r\n\r\n          if (tile.unit) {\r\n            tile.unit.draw(this.context, this.tileSize);\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  addUnitToSelectedTile() {\r\n    if (_mapEntities_Unit__WEBPACK_IMPORTED_MODULE_2__[\"default\"].add(this.selectedTile)) {\r\n      this.draw();\r\n    }\r\n  }\r\n\r\n  addRoadToSelectedTile() {\r\n    if (_mapEntities_Road__WEBPACK_IMPORTED_MODULE_4__[\"default\"].add(this.selectedTile)) {\r\n      this.draw();\r\n    }\r\n  }\r\n\r\n  addCityToSelectedTile() {\r\n    if (_mapEntities_City__WEBPACK_IMPORTED_MODULE_1__[\"default\"].add(this.selectedTile)) {\r\n      this.draw();\r\n    }\r\n  }\r\n\r\n  removeSelectedEntity() {\r\n    if (!this.selectedEntity) {\r\n      return;\r\n    }\r\n\r\n    const tile = this.selectedEntity.tile;\r\n    const gridTile = this.grid()[tile.point.y][tile.point.x];\r\n\r\n    if (this.selectedEntity instanceof _mapEntities_Unit__WEBPACK_IMPORTED_MODULE_2__[\"default\"]) {\r\n      gridTile.unit = null;\r\n    }\r\n\r\n    const neighbours = this.selectedEntity.neighbours;\r\n    if (this.selectedEntity instanceof _mapEntities_Road__WEBPACK_IMPORTED_MODULE_4__[\"default\"]) {\r\n      //  For each neighbour do a connectivity check and update connectedness\r\n      //  Update networks roads.\r\n      _mapEntities_Road__WEBPACK_IMPORTED_MODULE_4__[\"default\"].remove(gridTile, this.selectedEntity);\r\n      //  Find network that the road is connected to and it's neighbours and remove\r\n      \r\n    }\r\n    \r\n    if (this.selectedEntity instanceof _mapEntities_City__WEBPACK_IMPORTED_MODULE_1__[\"default\"]) {\r\n      _mapEntities_City__WEBPACK_IMPORTED_MODULE_1__[\"default\"].remove(gridTile);\r\n    }\r\n\r\n    this.selectedEntity = null;\r\n    this.draw();\r\n  }\r\n}\r\n\r\n/* harmony default export */ __webpack_exports__[\"default\"] = (Map);\r\n\n\n//# sourceURL=webpack:///./Map/Map.js?");

/***/ }),

/***/ "./generateGuid.js":
/*!*************************!*\
  !*** ./generateGuid.js ***!
  \*************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\nfunction generateGuid() {\r\n  return `${generateNumber()}-${generateNumber()}`;\r\n}\r\n\r\nfunction generateNumber() {\r\n  return Math.floor((1 + Math.random()) * 0x10000);\r\n}\r\n\r\n/* harmony default export */ __webpack_exports__[\"default\"] = (generateGuid);\r\n\n\n//# sourceURL=webpack:///./generateGuid.js?");

/***/ }),

/***/ "./index.js":
/*!******************!*\
  !*** ./index.js ***!
  \******************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _Map_Map__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Map/Map */ \"./Map/Map.js\");\n/* harmony import */ var _mapEntities_Point__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./mapEntities/Point */ \"./mapEntities/Point.js\");\n\r\n\r\n\r\nconst canvas = document.createElement('canvas');\r\nconst size = 500;\r\nconst bodyMargin = 8;\r\n\r\ncanvas.width=size;\r\ncanvas.height=size;\r\n\r\ndocument.getElementById('root').appendChild(canvas);\r\nconst context = canvas.getContext('2d');\r\n\r\nconst map = new _Map_Map__WEBPACK_IMPORTED_MODULE_0__[\"default\"](size, 40, context);\r\nmap.draw();\r\n\r\n//  Color in clicked square\r\ncanvas.addEventListener('click', (e) => {\r\n  let { clientX , clientY } = e;\r\n  clientX -= bodyMargin;\r\n  clientY -= bodyMargin;\r\n  \r\n  const tile = map.clickTile(clientX, clientY);\r\n\r\n  if (tile) {\r\n    document.querySelector('#selectedTile').innerHTML = tile.toString()\r\n      .split('')\r\n      .map(x => x === '\\n' ? '<br />' : x).join('');\r\n  } else {\r\n    document.querySelector('#selectedTile').innerHTML = '';\r\n  }\r\n});\r\n\r\n//  Zoom in and out and drag\r\nlet dragState = 0;\r\nconst startDrag = new _mapEntities_Point__WEBPACK_IMPORTED_MODULE_1__[\"default\"](0, 0);\r\n\r\nconst dragStates = { STARTED: 0, DRAGGING: 1, ENDED: 2}\r\n\r\ncanvas.addEventListener(\"mousedown\", (e) => {\r\n  dragState = dragStates.STARTED;\r\n  let { clientX , clientY } = e;\r\n  clientX -= bodyMargin;\r\n  clientY -= bodyMargin;\r\n\r\n  startDrag.x = clientX;\r\n  startDrag.y = clientY;\r\n}, false);\r\n\r\ncanvas.addEventListener(\"mousemove\", () => {\r\n  if (dragState === dragStates.STARTED) dragState = dragStates.DRAGGING;\r\n}, false);\r\n\r\ncanvas.addEventListener(\"mouseup\", (e) => {\r\n  if(dragState === dragStates.STARTED){\r\n  }\r\n  else if(dragState === dragStates.DRAGGING) {\r\n    let { clientX , clientY } = e;\r\n    clientX -= bodyMargin;\r\n    clientY -= bodyMargin;\r\n\r\n    const diffX = startDrag.x - clientX;\r\n    const diffY = startDrag.y - clientY;\r\n\r\n   // map.drag(diffX, diffY);\r\n    startDrag.x = 0;\r\n    startDrag.y = 0;\r\n  }\r\n  dragState = dragStates.ENDED;\r\n}, false);\r\n\r\n\r\nwindow.addEventListener('keydown', e => {\r\n  console.log(e.keyCode);\r\n  if (e.keyCode === 37) {\r\n    map.leftKey();\r\n  }\r\n\r\n  if (e.keyCode === 38) {\r\n    map.upKey();\r\n  }\r\n\r\n  if (e.keyCode === 39) {\r\n    map.rightKey();\r\n  }\r\n\r\n  if (e.keyCode === 40) {\r\n    map.downKey();\r\n  }\r\n\r\n  if (e.keyCode === 107) {\r\n    map.zoomIn();\r\n  }\r\n\r\n  if (e.keyCode === 109) {\r\n    map.zoomOut();\r\n  }\r\n\r\n  if (e.keyCode === 82) {\r\n    map.addRoadToSelectedTile();\r\n  }\r\n\r\n  if (e.keyCode === 67) {\r\n    map.addCityToSelectedTile();\r\n  }\r\n\r\n  if (e.keyCode === 85) {\r\n    map.addUnitToSelectedTile();\r\n  }\r\n\r\n  if (e.keyCode === 8 || e.keyCode === 46) {\r\n    map.removeSelectedEntity();\r\n  }\r\n  console.log(e.keyCode);\r\n});\r\n\r\ndocument.querySelector('#addCity').addEventListener('click', () => {\r\n  map.addCityToSelectedTile();\r\n});\r\n\r\ndocument.querySelector('#addRoad').addEventListener('click', () => {\r\n  map.addRoadToSelectedTile();\r\n});\r\n\r\n\r\n//  Given an array of squares and a view port, find the squares in the viewport\r\n//  Zooming changes how large you want to draw the squares but also the viewport\r\n//  Dragging changes the viewport start.\n\n//# sourceURL=webpack:///./index.js?");

/***/ }),

/***/ "./map/Tiles/Tile.js":
/*!***************************!*\
  !*** ./map/Tiles/Tile.js ***!
  \***************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _mapEntities_Point__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../mapEntities/Point */ \"./mapEntities/Point.js\");\n/* harmony import */ var _TileTypes__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./TileTypes */ \"./map/Tiles/TileTypes.js\");\n\r\n\r\n\r\nclass Tile {\r\n  constructor(x,y, type) {\r\n    this.point = new _mapEntities_Point__WEBPACK_IMPORTED_MODULE_0__[\"default\"](x,y);\r\n    this.selected = false;\r\n    this.id = `${x}-${y}`;\r\n    this.type = type;\r\n  }\r\n\r\n  equals(otherTile) {\r\n    return this.point.equals(otherTile.point);\r\n  }\r\n\r\n  toString() {\r\n    const tileDetails = `${this.point.x}, ${this.point.y}, ${this.type}`;\r\n    let cityDetails = '';\r\n    if (this.city) {\r\n      cityDetails = this.city.toString();\r\n    }\r\n    let roadDetails = '';\r\n    if (this.road) {\r\n      roadDetails = `${this.road.toString()}\\n${this.road.roadNetwork.toString()}`\r\n    }\r\n\r\n    const unitDetails = this.unit ? this.unit.toString() : '';\r\n    return `${tileDetails} ${cityDetails} ${roadDetails} ${unitDetails}`;\r\n  }\r\n}\r\n\r\nTile.copy = function (tile, type = null) {\r\n  let copy;\r\n  if (!type) {\r\n    copy =  new Tile(tile.point.x, tile.point.y, Tile.type);\r\n    copy.selected = copy.selected;\r\n  }\r\n\r\n  if (type === _TileTypes__WEBPACK_IMPORTED_MODULE_1__[\"default\"].Grass) {\r\n    copy = new GrassTile(tile.point.x, tile.point.y, Tile.type);\r\n    copy.selected = copy.selected;\r\n  }\r\n  \r\n  if (type === _TileTypes__WEBPACK_IMPORTED_MODULE_1__[\"default\"].Forest) {\r\n    copy = new ForestTile(tile.point.x, tile.point.y, Tile.type);\r\n    copy.selected = copy.selected;\r\n  }\r\n\r\n  if (type === _TileTypes__WEBPACK_IMPORTED_MODULE_1__[\"default\"].Ocean) {\r\n    copy = new OceanTile(tile.point.x, tile.point.y, Tile.type);\r\n    copy.selected = copy.selected;\r\n  }\r\n  return copy;\r\n}\r\n\r\n/* harmony default export */ __webpack_exports__[\"default\"] = (Tile);\r\n\n\n//# sourceURL=webpack:///./map/Tiles/Tile.js?");

/***/ }),

/***/ "./map/Tiles/TileTypes.js":
/*!********************************!*\
  !*** ./map/Tiles/TileTypes.js ***!
  \********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\nconst TileTypes = {\r\n  Grass: 'Grass',\r\n  Forest: 'Forest',\r\n  Ocean: 'Ocean',\r\n}\r\n\r\n/* harmony default export */ __webpack_exports__[\"default\"] = (TileTypes);\r\n\n\n//# sourceURL=webpack:///./map/Tiles/TileTypes.js?");

/***/ }),

/***/ "./mapEntities/City.js":
/*!*****************************!*\
  !*** ./mapEntities/City.js ***!
  \*****************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _map_Tiles_Tile__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../map/Tiles/Tile */ \"./map/Tiles/Tile.js\");\n/* harmony import */ var _generateGuid__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../generateGuid */ \"./generateGuid.js\");\n/* harmony import */ var _Grid_GridService__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../Grid/GridService */ \"./Grid/GridService.js\");\n\r\n\r\n\r\n\r\nclass City {\r\n  constructor(tile, name, population, neighbours) {\r\n    this.type = 'city';\r\n    this.id = Object(_generateGuid__WEBPACK_IMPORTED_MODULE_1__[\"default\"])();\r\n    this.tile = tile;\r\n    this.name = name;\r\n    this.population = population;\r\n\r\n    this.distances = [];\r\n\r\n    this.neighbours = neighbours.filter(neighbour => neighbour.city || neighbour.road)\r\n      .map(x => x.road || x.city);\r\n\r\n    \r\n    this.neighbours.forEach(n => {\r\n      n.neighbours.push(this);\r\n    });\r\n  \r\n\r\n    this.roadNetworks = [];\r\n    \r\n    this.neighbours.forEach(neighbour => {\r\n      if (neighbour.type === 'road') {\r\n        this.addNetwork(neighbour.roadNetwork);\r\n      }\r\n    });\r\n  }\r\n\r\n  equals(otherCity) {\r\n    return otherCity.id === this.id;\r\n  }\r\n\r\n  draw(context, tileSize) {\r\n    context.fillStyle = '#000000';\r\n    const baseX = this.tile.drawingPoint.x * tileSize;\r\n    const baseY = this.tile.drawingPoint.y * tileSize;\r\n    context.fillRect(baseX,  baseY + tileSize/2, tileSize/4, tileSize/2);\r\n    context.fillRect(baseX + tileSize/4,  baseY + tileSize/4, tileSize/2, 3*tileSize/4);\r\n    context.fillRect(baseX + 3*tileSize/4,  baseY + tileSize/2, tileSize/4, tileSize/2);\r\n  }\r\n\r\n  toString() {\r\n    const distances = this.distances.map(x => `Id: ${x.city.id} distance: ${x.distance}\\n`);\r\n    return `${this.id}: ${this.population}\\n ${distances}`;\r\n  }\r\n\r\n  addNetwork(network) {\r\n    if (!this.roadNetworks.some(x => x.id === network.id)) {\r\n      this.roadNetworks.push(network);\r\n      network.cities.push(this);\r\n      network.findDistancesForCities();\r\n    }\r\n  }\r\n}\r\n\r\nCity.remove = function(gridTile) {\r\n  \r\n  gridTile.city = null;\r\n  //  Remove from neighbouring roadnetworks and recalculate networks\r\n}\r\n\r\nCity.add = function(selectedTile) {\r\n  if (!selectedTile) return false;\r\n\r\n  if (selectedTile.city || selectedTile.road) return false;\r\n\r\n  if (selectedTile.type === 'water') return false;\r\n  const neighbours = _Grid_GridService__WEBPACK_IMPORTED_MODULE_2__[\"gridService\"].findSelectedTileCrossNeighbours(selectedTile);\r\n  selectedTile.city = new City(selectedTile, 'New City', 1, neighbours);\r\n\r\n  //   TODO - move this into road.\r\n  neighbours.filter(x => x && x.road).forEach(neighbour => {\r\n    const n = _Grid_GridService__WEBPACK_IMPORTED_MODULE_2__[\"gridService\"].findCrossNeighbours(_Grid_GridService__WEBPACK_IMPORTED_MODULE_2__[\"gridService\"].tileToIndex(neighbour));\r\n    neighbour.road.shape = Road.findShape(n);\r\n  });\r\n\r\n  return true;\r\n}\r\n\r\n/* harmony default export */ __webpack_exports__[\"default\"] = (City);\n\n//# sourceURL=webpack:///./mapEntities/City.js?");

/***/ }),

/***/ "./mapEntities/Point.js":
/*!******************************!*\
  !*** ./mapEntities/Point.js ***!
  \******************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n\r\nclass Point {\r\n  constructor(x, y) {\r\n    this.x = x;\r\n    this.y = y;\r\n  }\r\n\r\n  equals(otherPoint) {\r\n    return this.x === otherPoint.x && this.y === otherPoint.y;\r\n  }\r\n}\r\n\r\n/* harmony default export */ __webpack_exports__[\"default\"] = (Point);\n\n//# sourceURL=webpack:///./mapEntities/Point.js?");

/***/ }),

/***/ "./mapEntities/Road.js":
/*!*****************************!*\
  !*** ./mapEntities/Road.js ***!
  \*****************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _RoadNetwork__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./RoadNetwork */ \"./mapEntities/RoadNetwork.js\");\n/* harmony import */ var _City__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./City */ \"./mapEntities/City.js\");\n/* harmony import */ var _generateGuid__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../generateGuid */ \"./generateGuid.js\");\n/* harmony import */ var _Grid_GridService__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../Grid/GridService */ \"./Grid/GridService.js\");\n\r\n\r\n\r\n\r\n\r\n\r\nconst Shapes = {\r\n  isolated: 'isolated',\r\n  top: 'top',\r\n  left: 'left',\r\n  bottom: 'bottom',\r\n  right: 'right',\r\n  vertical: 'vertical',\r\n  horizontal: 'horizontal',\r\n  topRight: 'topRight',\r\n  topLeft: 'topLeft',\r\n  bottomRight: 'bottomRight',\r\n  bottomLeft: 'bottomLeft',\r\n  horizontalBottom: 'horizontalBottom',\r\n  horizontalTop: 'horizontalTop',\r\n  verticalLeft: 'verticalLeft',\r\n  verticalRight: 'verticalRight',\r\n  cross: 'cross'\r\n};\r\n\r\n\r\nclass Road {\r\n  constructor(tile, neighbours) {\r\n    this.type = 'road';\r\n    this.id = Object(_generateGuid__WEBPACK_IMPORTED_MODULE_2__[\"default\"])();\r\n    this.tile = tile;\r\n    this.shape = Road.findShape(neighbours);\r\n    this.neighbours = neighbours.filter(neighbour => neighbour.city || neighbour.road)\r\n      .map(x => x.road || x.city);\r\n\r\n    this.neighbours.forEach(n => {\r\n      n.neighbours.push(this);\r\n    });\r\n\r\n    const neighbouringRoads = this.neighbours.filter(x => x instanceof Road)\r\n    const neighbouringRoadNetworks = neighbouringRoads.map(x => x.roadNetwork);\r\n\r\n    if (neighbouringRoadNetworks.length > 0) {\r\n        this.mergeNetworks(neighbouringRoadNetworks);\r\n    } else {\r\n      this.roadNetwork = new _RoadNetwork__WEBPACK_IMPORTED_MODULE_0__[\"default\"](this);\r\n      this.roadNetwork.addRoad(this);\r\n    }\r\n\r\n    const neighbouringCities = this.neighbours.filter(x => x instanceof _City__WEBPACK_IMPORTED_MODULE_1__[\"default\"]);\r\n    neighbouringCities.forEach(city => {\r\n      city.addNetwork(this.roadNetwork);\r\n    });\r\n\r\n    neighbouringRoads.forEach(road => {\r\n      road.neighbours.push(this);\r\n      road.shape = Road.findShape(road.neighbours);\r\n    });\r\n  }\r\n\r\n  equals(otherRoad) {\r\n    return this.tile.equals(otherRoad.tile);\r\n  }\r\n\r\n  toString() {\r\n    return `${this.type}: ${this.shape}`;\r\n  }\r\n  \r\n  mergeNetworks(networks) {\r\n    const first = networks.pop();\r\n    if (!this.roadNetwork) {\r\n      first.addRoad(this);\r\n      this.roadNetwork = first;\r\n    }\r\n    first.merge(networks);\r\n  }\r\n\r\n  drawHorizontal(context, tileSize) {\r\n    context.fillRect(this.tile.drawingPoint.x * tileSize, this.tile.drawingPoint.y * tileSize + 3*tileSize/8, tileSize, tileSize/4);\r\n  }\r\n\r\n  drawVertical(context, tileSize) {\r\n    context.fillRect(this.tile.drawingPoint.x * tileSize + 3*tileSize/8, this.tile.drawingPoint.y * tileSize, tileSize/4, tileSize);\r\n  }\r\n\r\n  drawTop(context, tileSize) { \r\n    context.fillRect(this.tile.drawingPoint.x * tileSize + 3*tileSize/8, this.tile.drawingPoint.y * tileSize, tileSize/4, 5*tileSize/8);\r\n  }\r\n  \r\n  drawBottom(context, tileSize) { \r\n    context.fillRect(this.tile.drawingPoint.x * tileSize + 3*tileSize/8, this.tile.drawingPoint.y * tileSize + 3*tileSize/8, tileSize/4, tileSize);\r\n  }\r\n  \r\n  drawLeft(context, tileSize) { \r\n    context.fillRect(this.tile.drawingPoint.x * tileSize, this.tile.drawingPoint.y * tileSize + 3*tileSize/8, 5*tileSize/8, tileSize/4);\r\n  }\r\n  \r\n  drawRight(context, tileSize) { \r\n    context.fillRect(this.tile.drawingPoint.x * tileSize + tileSize/2, this.tile.drawingPoint.y * tileSize + 3*tileSize/8, 3*tileSize/4, tileSize/4);\r\n  }\r\n\r\n  draw(context, tileSize) {\r\n    context.fillStyle = '#c48b23';\r\n\r\n    switch (this.shape) {\r\n      case Shapes.isolated:\r\n        context.fillRect(this.tile.drawingPoint.x * tileSize + tileSize/2, this.tile.drawingPoint.y * tileSize + tileSize/2, tileSize/4, tileSize/4);\r\n        break;\r\n        \r\n      case Shapes.vertical:\r\n        this.drawVertical(context, tileSize);\r\n        break;\r\n      \r\n      case Shapes.horizontal:\r\n        this.drawHorizontal(context, tileSize);\r\n        break;\r\n        \r\n      case Shapes.left:\r\n        this.drawLeft(context, tileSize);\r\n        break;\r\n\r\n      case Shapes.right:\r\n        this.drawRight(context, tileSize);\r\n        break;\r\n\r\n      case Shapes.top:\r\n        this.drawTop(context, tileSize);\r\n        break;\r\n\r\n      case Shapes.bottom:\r\n        this.drawBottom(context, tileSize);\r\n        break;\r\n\r\n      case Shapes.cross:\r\n        this.drawVertical(context, tileSize);\r\n        this.drawHorizontal(context, tileSize);\r\n        break;\r\n\r\n      case Shapes.topLeft:\r\n        this.drawTop(context, tileSize);\r\n        this.drawLeft(context, tileSize);\r\n        break;\r\n\r\n      case Shapes.topRight:\r\n        this.drawTop(context, tileSize);\r\n        this.drawRight(context, tileSize);\r\n        break;\r\n\r\n      case Shapes.bottomLeft:\r\n        this.drawBottom(context, tileSize);\r\n        this.drawLeft(context, tileSize);\r\n        break;\r\n\r\n      case Shapes.bottomRight:\r\n        this.drawBottom(context, tileSize);\r\n        this.drawRight(context, tileSize);\r\n        break;\r\n\r\n      case Shapes.verticalLeft:\r\n        this.drawVertical(context, tileSize);\r\n        this.drawLeft(context, tileSize);\r\n        break;\r\n\r\n      case Shapes.verticalRight:\r\n        this.drawVertical(context, tileSize);\r\n        this.drawRight(context, tileSize);\r\n        break;\r\n\r\n      case Shapes.horizontalTop:\r\n        this.drawHorizontal(context, tileSize);\r\n        this.drawTop(context, tileSize);\r\n        break;\r\n\r\n      case Shapes.horizontalBottom:\r\n        this.drawHorizontal(context, tileSize);\r\n        this.drawBottom(context, tileSize);\r\n        break;\r\n    }\r\n  }\r\n}\r\n\r\nRoad.remove = function (gridTile, road) {\r\n  gridTile.road = null;\r\n\r\n  //  Cases:\r\n  //    single neighbouring road\r\n  //      remove road from neighbour and from network\r\n  //    multiple neighbouring roads\r\n  //      remove road from neighbours \r\n  //      for each neighbouring network reprocess connectivity\r\n  //    neighbouring city\r\n  //      Remove road from neighbours\r\n  //      process connectivity to check if the network should be removed\r\n  road.neighbours.forEach(neighbour => {\r\n    neighbour.neighbours = neighbour.neighbours.filter(x => x.id !== neighbour);\r\n  })\r\n}\r\n\r\nRoad.findConnectivity = function(roads) {\r\n  // Idea is to perform a seperate bfs in step on each peace of road and check connectivity at each step\r\n  // If two networks contain the same node then they are connected.\r\n\r\n  const searches = roads.map(x => {\r\n    const visited = {};\r\n    visited[x.id] = true;\r\n    return { isFinished: false, edgeSet: x.neighbours, visited, connected: [] };\r\n  });\r\n\r\n  while (searches.find(x => x.isFinished).length > 0) {\r\n    console.log('Iteration 1');\r\n    searches.forEach(x => x.finished = true);\r\n  }\r\n  //  Continue until all searches are complete.\r\n  //  Test each iteration and stop search if necessary.\r\n}\r\n\r\n//  Save state \r\nRoad.incrementalBfs = function() {\r\n\r\n}\r\n\r\n\r\nRoad.findShape = function (neighbours) {\r\n  const topNeighbour = (neighbours[0] && (neighbours[0].road || neighbours[0].city)) || null;\r\n  const leftNeighbour = (neighbours[1] && (neighbours[1].road || neighbours[1].city)) || null;\r\n  const rightNeighbour = (neighbours[2] && (neighbours[2].road || neighbours[2].city)) || null;\r\n  const bottomNeighbour = (neighbours[3] && (neighbours[3].road || neighbours[3].city)) || null;\r\n\r\n  let shape = Shapes.isolated;\r\n  \r\n  if (topNeighbour) {\r\n    if (leftNeighbour) {\r\n      if (rightNeighbour && bottomNeighbour) {\r\n        shape = Shapes.cross;\r\n        // [topNeighbour, leftNeighbour, rightNeighbour, bottomNeighbour].forEach(updateRoad);\r\n      } else if (rightNeighbour) {\r\n        shape = Shapes.horizontalTop;\r\n      } else if (bottomNeighbour) {\r\n        shape = Shapes.verticalLeft;\r\n      } else {\r\n        shape = Shapes.topLeft;\r\n      }\r\n    } else if (rightNeighbour) {\r\n      if (bottomNeighbour) {\r\n        shape = Shapes.verticalRight;\r\n      } else {\r\n        shape = Shapes.topRight;\r\n      }\r\n    } else {\r\n      if (bottomNeighbour) {\r\n        shape = Shapes.vertical;\r\n      } else {\r\n        shape = Shapes.top;\r\n      }\r\n    }\r\n  } else if (bottomNeighbour) {\r\n  if (leftNeighbour) {\r\n    if (rightNeighbour) {\r\n      shape = Shapes.horizontalBottom;\r\n    } else {\r\n      shape = Shapes.bottomLeft;\r\n    }\r\n  } else if (rightNeighbour) {\r\n    shape = Shapes.bottomRight;\r\n  } else {\r\n    shape = Shapes.bottom;\r\n  }\r\n  } else if (leftNeighbour) {\r\n    if (rightNeighbour) {\r\n      shape = Shapes.horizontal;\r\n    } else {\r\n      shape = Shapes.left;\r\n    }\r\n  } else if (rightNeighbour) {\r\n    shape = Shapes.right;\r\n  }\r\n\r\n  return shape;\r\n}\r\n\r\nRoad.add = function (tile) {\r\n  if (!tile) return false;\r\n\r\n  if (tile.city || tile.road) return false;\r\n\r\n  if (tile.type === 'water') return false;\r\n\r\n  const neighbours = _Grid_GridService__WEBPACK_IMPORTED_MODULE_3__[\"gridService\"].findSelectedtileCrossNeighbours(tile);\r\n\r\n  tile.road = new Road(tile, neighbours);\r\n  return true;\r\n}\r\n\r\n/* harmony default export */ __webpack_exports__[\"default\"] = (Road);\n\n//# sourceURL=webpack:///./mapEntities/Road.js?");

/***/ }),

/***/ "./mapEntities/RoadNetwork.js":
/*!************************************!*\
  !*** ./mapEntities/RoadNetwork.js ***!
  \************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _generateGuid__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../generateGuid */ \"./generateGuid.js\");\n\r\n\r\nclass RoadNetwork {\r\n  constructor(road = null, city = null) {\r\n    this.id = Object(_generateGuid__WEBPACK_IMPORTED_MODULE_0__[\"default\"])();\r\n    this.cities = [];\r\n    this.roads = [];\r\n  }\r\n\r\n  addRoad(road) {\r\n    this.roads.push(road);\r\n    road.roadNetwork = this;\r\n  }\r\n\r\n  toString() {\r\n    return `Id: ${this.id}, Cities: ${this.cities.length}, Roads: ${this.roads.length}`;\r\n  }\r\n\r\n  addCity(city) {\r\n    this.cities.push(city);\r\n    city.roadNetwork = this;\r\n  }\r\n\r\n  merge(networks) {\r\n    networks.forEach(network => {\r\n      network.cities.forEach(x => {\r\n        if (!this.cities.find(city => city.equals(x))) {\r\n          this.cities.push(x);\r\n          x.roadNetwork = this;\r\n        }\r\n      });\r\n  \r\n      //  Should optimise - store roads as dictionary\r\n      network.roads.forEach(x => {\r\n        if (!this.roads.find(road => road.equals(x))) {\r\n          this.roads.push(x);\r\n          x.roadNetwork = this;\r\n        }\r\n      });\r\n    });\r\n    \r\n   this.findDistancesForCities();\r\n  }\r\n\r\n  findDistancesForCities() {\r\n    //  For each city to a bfs and find neighbours.\r\n    this.cities.forEach(city => {\r\n      this.findDistances(city);\r\n    });\r\n  }\r\n\r\n  findDistances(city) {\r\n    const distances = [];\r\n    let neighbours = city.neighbours.map(node => ({node, distance: 0 }));\r\n    const visited = {};\r\n    visited[city.id] = true;\r\n\r\n    while(neighbours.length !== 0) {\r\n      //  visit each neighbour\r\n      const neighbour = neighbours.pop();\r\n      if (neighbour.node.type === 'city') {\r\n        distances.push({city, distance: neighbour.distance });\r\n      } else {\r\n        visited[neighbour.node.id] = true;\r\n        const neighboursNeighbours = neighbour.node.neighbours\r\n          .filter(x => !visited[x.id])\r\n          .map(x => ({ node: x, distance: neighbour.distance + 1 }));\r\n        neighbours = neighbours.concat(neighboursNeighbours);\r\n      }\r\n    }\r\n    city.distances = distances;\r\n  }\r\n}\r\n\r\n/* harmony default export */ __webpack_exports__[\"default\"] = (RoadNetwork);\r\n\n\n//# sourceURL=webpack:///./mapEntities/RoadNetwork.js?");

/***/ }),

/***/ "./mapEntities/Unit.js":
/*!*****************************!*\
  !*** ./mapEntities/Unit.js ***!
  \*****************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n\r\nclass Unit {\r\n  constructor(tile, name) {\r\n    this.tile = tile;\r\n    this.name = name;\r\n  }\r\n\r\n  draw(context, tileSize) {\r\n    context.fillStyle = '#FF0000';\r\n    context.fillRect(this.tile.drawingPoint.x * tileSize + tileSize/4, this.tile.drawingPoint.y * tileSize + tileSize/4, tileSize/2, 3*tileSize/4);\r\n  }\r\n\r\n  toString() {\r\n    return `Unit: ${this.name}`;\r\n  }\r\n}\r\n\r\nUnit.add = function(selectedTile) {  \r\n  if (!selectedTile) return false;\r\n\r\n  if (selectedTile.city || selectedTile.road || selectedTile.unit) return false;\r\n\r\n  if (selectedTile.type === 'water') return false;\r\n  selectedTile.unit = new Unit(selectedTile, 'New Unit');\r\n\r\n  return true;\r\n}\r\n/* harmony default export */ __webpack_exports__[\"default\"] = (Unit);\n\n//# sourceURL=webpack:///./mapEntities/Unit.js?");

/***/ })

/******/ });